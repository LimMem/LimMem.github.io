<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[《Objective-C编程全解》之读书笔记]]></title>
    <url>%2F2019%2F10%2F14%2F%E3%80%8AObjective-C%E7%BC%96%E7%A8%8B%E5%85%A8%E8%A7%A3%E3%80%8B%E4%B9%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[一、对象和消息 实例变量的生成和初始化 1、OC初始化一个对象一般使用 [类名 alloc] init] 来初始化。其中，alloc只是对所需要的对象进行储存空间的分配，但是并没有对象初始化，初始化需要调用init方法。2、init并不意味着对象重置，如果需要reset就必须自己实现重置函数。 类的声明 1、 接口 12345678@interface 类名: 父类名&#123; // 属性定义&#125;// 方法声明@end Objective-C中的编译命令都是用@字符开头。 NSObject类是OC的根类。 方法123456789101112131415// 无返回值无参数- (void)setLocalStorage;// 有返回值无参数- (NSString *)getUserName;// 无返回值有参数- (void)setUserName:(NSString *)userName;// 有参数有返回值- (instance)initWithUserName:(NSString *)userName;// 有多个参数有返回值- (instance)initWithUserName:(NSString *)userName age:(NSInteger)age; 小结： 在OC中声明方法，当参数或者返回值是id时，可以省略不写。例如：- initWithObject: object;和- (id) initWithObject: (id)object; 也是可以通过编译和运行的。但是这种写法不推荐使用。 编译 1、在Cocoa环境中，系统提供的类和函数被封装在框架(framework)中。并以动态库的形式被提供给应用程序调用。2、编译一个.m(m是模块的意思)文件，可以使用xcode，也可以使用命令行clang 文件名.m -framewrok Foundation 。 其中Foundation可以改成你需要使用的框架， 然后会生成一个xxx.out的可执行文件。可以在命令号直接输入./xxx.out就可以打印出相应的结果。 可追加-Wmost或者-Wall显示警告信息 动态绑定 定义: 程序在执行时才能确定对象的属性和需要响应的消息。 多态 定义： 同一操作作用于不同的类的实例时，将产生不同的执行效果。 有继承才存在多态。 多态是面向对象语言一个方法，参数传递用父类的类型，子类重写父类的方法，方法中调用子类方法的实现，当增加一个子类时，无需添加其他形式。具体可以查看下面的例子： 类A具备run方法 12345678910111213@interface A : NSObject- (void)run;@end@implementation- (void)run &#123; NSLog(@"Animation is runing")&#125;@end 类 B集成于类A, 并重写run方法， 12345678910111213@interface B : A- (void)run;@end@implementation- (void)run &#123; NSLog(@"B is runing")&#125;@end 类 C集成于类A, 并重写run方法， 12345678910111213@interface C : A- (void)run;@end@implementation- (void)run &#123; NSLog(@"C is runing")&#125;@end 多态的使用 1234567891011121314151617181920212223242526#import "A.h"#import "B.h"#import "C.h"@interface N : NSObject@end@implementation- (void)runningWithAnimation:(A *)animation &#123; [A run];&#125;- (void)init &#123; if (self = [super init]) &#123; [self runningWithAnimation:[B new]]; // 输出 B is runing [self runningWithAnimation:[C new]]; // 输出 C is &#125; return self;&#125;@end 在实际的项目中，需求方可能会提出动物D也需要具备run的能力，这个时候 我们只需要增加一个D的类，并重写run的方法即可。如下： 1234567891011121314@interface D : A- (void)run;@end@implementation- (void)run &#123; NSLog(@"D is runing")&#125;@end 小结 继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写； 有了继承，才能有多态。在调用类实例方法的时候，尽量把变量视作父类类型，这样，所有子类类型都可以正常被接收； 多态是面向对象的一个重要特征，大大增加了软件的灵活性和扩展性。]]></content>
      <categories>
        <category>Objective-C编程全解</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[UML类图笔记]]></title>
    <url>%2F2019%2F10%2F10%2FUML%E7%B1%BB%E5%9B%BE%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"></content>
      <categories>
        <category>软件设计图</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法之笔记记录]]></title>
    <url>%2F2019%2F10%2F02%2FMarkdown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[一、Markdown定义 Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 二、Markdown语法1、标题 语法 效果 2、字体样式 语法 效果 *斜体* 斜体 **加粗** 加粗 ***斜体加粗*** 斜体加粗 3、列表 无序列表 语法 效果 - 苹果- 橘子 - 香蕉 ·苹果·橘子·香蕉 有序列表 语法 效果 1. 苹果2. 橘子 3. 香蕉 1. 苹果2. 橘子3. 香蕉 4、图片语法 ![图片名](链接url) 语法 效果 ![笨记忆](/images/avatar.png) 5、 超链接语法 [链接名](链接url) 语法 效果 [笨记忆的技术博客](https://limmem.github.io/) 笨记忆 6、 代码块语法 &lt;!–￼0–&gt; 语法 效果 7、 引用语法 &gt; 语法 效果 &gt; Markdown是一种可以使用普通文本编辑器编写的标记语言 8、 特殊标记语法 `特殊标记` 语法 效果 我是需要`特殊标记`的文字 我是需要特殊标记的文字 9、 表格语法 水果 | 蔬菜 | 零食 —- | —- | —- 苹果 | 上海青 | 方便面 香蕉 | 胡萝卜 | 瓜子 语法 效果 10、 分割线语法 -– 语法 效果 11、上下行语法 log&lt;sub&gt;2&lt;/sub&gt;10 语法 效果 log&lt;sub&gt;2&lt;/sub&gt;10 log210 10&lt;sup&gt;2&lt;/sup&gt; * 5&lt;sup&gt;3&lt;/sup&gt; 102 * 53 12、 删除线语法 ~这是一段错误的文本 语法 效果 ~这是一段错误的文本 这是一段错误的文本]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[《图解TCP/IP》第一章]]></title>
    <url>%2F2019%2F10%2F02%2F%E3%80%8A%E5%9B%BE%E8%A7%A3TCP-IP%E3%80%8B%E7%AC%AC%E4%B8%80%E7%AB%A0%2F</url>
    <content type="text"></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[《图解HTTP》第一章]]></title>
    <url>%2F2019%2F10%2F02%2F%E3%80%8A%E5%9B%BE%E8%A7%A3HTTP%E3%80%8B%E7%AC%AC%E4%B8%80%E7%AB%A0%2F</url>
    <content type="text"></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[《Objective-C编程之道 iOS设计模式解析》之原型模式]]></title>
    <url>%2F2019%2F10%2F02%2F%E3%80%8AObjective-C%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93-iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A7%A3%E6%9E%90%E3%80%8B%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[第一篇]]></title>
    <url>%2F2019%2F10%2F02%2F%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E2%80%94%E2%80%94%E9%93%BE%E6%8E%A5%E3%80%81%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93-%E7%AC%AC%E4%B8%80%E7%AF%87%2F</url>
    <content type="text"></content>
      <categories>
        <category>操作系统和编译原理</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SDWebimage源码阅读一]]></title>
    <url>%2F2019%2F10%2F02%2FSDWebimage%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B8%80%2F</url>
    <content type="text"></content>
      <categories>
        <category>源码分析指南</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LeetCode刷题错题记录]]></title>
    <url>%2F2019%2F10%2F02%2FLeetCode%E5%88%B7%E9%A2%98%E9%94%99%E9%A2%98%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"></content>
      <categories>
        <category>LeetCode刷题之总结</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[挑战程序设计竞赛-初出茅庐之初级篇]]></title>
    <url>%2F2019%2F10%2F02%2F%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B-%E5%88%9D%E5%87%BA%E8%8C%85%E5%BA%90%E4%B9%8B%E5%88%9D%E7%BA%A7%E7%AF%87%2F</url>
    <content type="text"></content>
      <categories>
        <category>挑战程序设计竞赛</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[大话数据结构之算法]]></title>
    <url>%2F2019%2F10%2F02%2F%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"></content>
      <categories>
        <category>大话数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Objective-C编程全解之面向对象编程]]></title>
    <url>%2F2019%2F10%2F01%2FObjective-C%E7%BC%96%E7%A8%8B%E5%85%A8%E8%A7%A3%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"></content>
      <categories>
        <category>Objective-C编程全解</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建技术博客之学习记录]]></title>
    <url>%2F2019%2F09%2F30%2FHexo%E6%90%AD%E5%BB%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E4%B9%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
</search>
